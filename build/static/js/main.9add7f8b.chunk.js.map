{"version":3,"sources":["Images/main_logo.png","Routes/routes.ts","Components/MiniPostList/MinPostList.queries.ts","Components/MiniPostList/MiniPostList.tsx","Routes/Home/Home.tsx","Components/Logo.tsx","Components/Input.tsx","Components/CateDrawer.tsx","LocalQueries.ts","Components/Login/Login.queries.ts","Components/Login/Login.tsx","Components/SignUp/SignUp.queries.ts","Components/SignUp/SignUp.tsx","Components/UserDrawer.tsx","Components/Header.tsx","Hooks/useInput.ts","Routes/Search/Search.queries.ts","Routes/Search/Search.tsx","Routes/Upload/Uplaod.queries.ts","Components/PostUploader.tsx","Components/NeedLoginNotification.tsx","Routes/Upload/Upload.tsx","Routes/PostDetail/PostDetail.queries.ts","Components/Comments/Comments.queries.ts","shared.queries.ts","Components/Comments/Comments.tsx","Components/PostCard.tsx","Routes/PostDetail/PostDetail.tsx","Routes/Category/Category.tsx","Components/ListViewItem.tsx","Components/PostListView.tsx","Components/MyShop.tsx","Routes/UserShop/UserShop.tsx","Routes/MyLog/MyLog.tsx","Components/App/AppPresenter.tsx","styles/theme.ts","Components/App/index.ts","Components/App/AppContainer.tsx","Apollo/LocalState.ts","Apollo/apollo.ts","Components/MainContext.tsx","styles/globalStyles.ts","index.tsx"],"names":["module","exports","GET_CATEGORY","gql","SInfiniteScroll","styled","InfiniteScroll","props","theme","basciWidth","SCard","Card","CardImg","img","CardTittl","p","Message","div","MiniPostList","category","history","useHistory","useQuery","variables","items","pageNumber","fetchPolicy","data","loading","fetchMore","size","CategoryPost","posts","length","dataLength","next","updateQuery","prev","fetchMoreResult","error","Object","assign","console","log","hasMore","loader","map","post","onClick","postId","id","push","key","cover","alt","src","files","url","hoverable","title","Container","Home","Img","minWidth","Logo","require","SInput","input","borderRadius","bgColor","searchFontSize","Input","placeholder","value","onChange","required","type","className","MenuBtn","Button","iconSize","BtnIcon","MenuUnfoldOutlined","CategoryColumn","CateDrawer","useState","visible","setVisible","ghost","icon","placement","closable","onClose","width","to","LOG_USER_IN","LOG_USER_OUT","IS_LOGGED_IN","LOGIN","BtnWrapper","BasicBtn","SLink","Link","blueColor","pinkColor","SItem","Form","Item","Login","setLoginModal","setDrawVisible","setSignupModal","loginModalBool","useForm","form","useMutation","userLogInMutation","onCompleted","a","ok","token","message","success","username","resetFields","loginMutaion","onFinish","values","userId","password","useEffect","name","initialValues","remember","rules","prefix","UserOutlined","LockOutlined","htmlType","SIGN_UP","VERIFY_START","VERIFY_COMPLETE","formItemLayout","labelCol","xs","span","sm","wrapperCol","SForm","SFromItem","Label","SInputPassword","Password","SInputTextArea","TextArea","BtnFormItem","SButton","SignUpCompo","modifiedPhone","setModifiedPhone","getFieldValue","verifyPhoneMutation","verifyLoading","verfiyCompleteMutation","completeLoading","SignUp","notification","description","onError","signUpMutation","signupLoading","nickname","secretKey","info","phoneNumber","onVerify","phoneNum","test","modifiedPhoneNum","slice","scrollToFirstError","labelAlign","colon","label","QuestionCircleOutlined","whitespace","min","hasFeedback","dependencies","validator","rule","Promise","reject","resolve","autoSize","SModal","Modal","UserDrawer","drawerVisible","signupModalBool","location","useLocation","userLogoutMutation","drawerToggle","auth","isLoggedIn","loginHandle","onLogoutClick","signupHandle","routes","onConfirm","onCancel","okText","cancelText","footer","onOk","header","Wrapper","SearchInput","Header","search","initValue","setValue","event","target","useInput","onSubmit","preventDefault","SEARCH","SearchContainer","term","queryString","parse","SearchPost","UPLOAD","getBase64","file","reader","FileReader","readAsDataURL","onload","result","onerror","basicMarginTop","Tittle","ImgWrapper","PostUploader","previewVisible","setPreviewVisible","previewImage","setPreviewImage","fileList","setFileList","uploadList","setUploadList","uploading","setUploading","UploadPost","uploadMutation","handlePreview","preview","originFileObj","handleUpload","desc","formData","FormData","forEach","append","reqwest","method","processData","contentType","uploadButton","PlusOutlined","Option","listType","onPreview","beforeUpload","onRemove","index","indexOf","newFileList","splice","uploadListIndex","newUploadList","style","disabled","NeedLoginNotification","POST_DETAIL","RENT","CREATE_COMMENT","GET_ME","RENT_STAUTS","GET_MY_RENTS","CommentBtn","CommentList","comments","dataSource","undefined","itemLayout","renderItem","content","text","author","user","Editor","submitting","rows","Comments","useParams","commentsArr","setCommentsArr","getMeData","meLoading","GetMe","commentMutation","addLoading","handleSubmit","e","Title","RentBtn","SDescriptions","Descriptions","SDescriptionsItem","Text","Desc","SCarousel","Carousel","CommentLabel","PostCard","createdAt","updatadAt","rentModalBool","setRentModalBool","timestamp","Date","toString","ReqRent","rentMutation","modalHandleOk","idx","bordered","column","cate","categoryChanger","okType","PostDetail","Category","categoryName","toUpperCase","List","Main","main","StatusText","status","StatusBtn","ModalBtnWrapper","ListViewItem","mutationFunc","modalBool","setModalBool","statusTransformer","rents","setStatus","handleOk","rentId","PostListView","statusMutation","item","MyShop","setUsername","setPosts","MyLog","Rent","RentTitle","RentStatus","AppPresenter","path","exact","component","Search","UserShop","from","doorColor","AppContainer","defaults","__typename","Boolean","localStorage","getItem","resolvers","Mutation","logUserIn","_","appCache","cache","setItem","writeData","logUserOut","__","removeItem","ApolloClient","uri","clientState","request","operation","setContext","headers","authorization","MainContext","createContext","dispatch","state","reducer","action","getMeRefetch","payload","MainProvider","children","useReducer","Provider","createGlobalStyle","reset","ReactDOM","render","client","App","document","getElementById"],"mappings":"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","file":"static/js/main.9add7f8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main_logo.5ba9b307.png\";","export default {\n  HOME: \"/\",\n  SEARCH: \"/search\",\n  UPLOAD: \"/upload\",\n  POST: \"/post/:postId\",\n  CATEGORY: \"/category/:categoryName\",\n  MYSHOP: \"/myshop\",\n  MYLOG: \"/mylog\"\n} as const;\n","import { gql } from \"apollo-boost\";\n\nconst GET_CATEGORY = gql`\n  query CategoryPost($category: String, $pageNumber: Int!, $items: Int!) {\n    CategoryPost(category: $category, pageNumber: $pageNumber, items: $items) {\n      ok\n      error\n      posts {\n        id\n        title\n        category\n        files {\n          url\n        }\n      }\n    }\n  }\n`;\n\nexport default GET_CATEGORY;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Spin, Card } from \"antd\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { CategoryPost, CategoryPostVariables } from \"../../types/api\";\nimport GET_CATEGORY from \"./MinPostList.queries\";\nimport { useHistory } from \"react-router-dom\";\nimport { ISProps } from \"../../types/custom\";\n\nconst SInfiniteScroll = styled(InfiniteScroll)`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 20px;\n  padding: 10px;\n  justify-items: center;\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  height: 400px;\n`;\n\nconst SCard = styled(Card)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  width: 200px;\n  height: 300px;\n  box-shadow: 1px 1px 10px black;\n  > .ant-card-body {\n    padding: 5px 5px 15px;\n  }\n`;\n\nconst CardImg = styled.img`\n  width: 200px;\n  height: 200px;\n`;\n\nconst CardTittl = styled.p`\n  font-weight: 800;\n  padding: 0px 3px;\n`;\n\nconst Message = styled.div`\n  font-weight: 900;\n`;\n\ninterface IProps {\n  category?: string;\n}\n\nconst MiniPostList: React.FC<IProps> = ({ category }) => {\n  const history = useHistory();\n  const items = 10; // 쿼리 당 가져올 post 갯수\n\n  const { data, loading, fetchMore } = useQuery<\n    CategoryPost,\n    CategoryPostVariables\n  >(GET_CATEGORY, {\n    variables: { items, pageNumber: 0, category },\n    fetchPolicy: \"cache-and-network\"\n  });\n\n  const onLoadMore = () => {\n    try {\n      fetchMore({\n        variables: {\n          pageNumber: data?.CategoryPost?.posts!.length,\n          items,\n          category\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          // updateQuery를 통해 기존 data에 새로운 data 추가\n          if (fetchMoreResult?.CategoryPost?.error) return prev;\n          return Object.assign({}, prev, {\n            CategoryPost: {\n              ...prev!.CategoryPost!,\n              posts: [\n                ...prev!.CategoryPost!.posts!,\n                ...fetchMoreResult!.CategoryPost!.posts!\n              ]\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onClick = (postId: string) => () => {\n    history.push(`/post/${postId}`);\n  };\n\n  return (\n    <>\n      {!loading ? (\n        data &&\n        data.CategoryPost &&\n        data.CategoryPost.posts &&\n        data.CategoryPost.posts!.length !== 0 ? (\n          <SInfiniteScroll\n            dataLength={data.CategoryPost!.posts!.length}\n            next={onLoadMore}\n            hasMore={true}\n            loader={null}\n          >\n            {data.CategoryPost!.posts!.map(post => {\n              if (post) {\n                return (\n                  <SCard\n                    onClick={onClick(post.id)}\n                    key={post.id}\n                    cover={\n                      <CardImg alt=\"상품 사진\" src={post!.files![0]!.url} />\n                    }\n                    hoverable\n                  >\n                    <CardTittl>{post.title}</CardTittl>\n                  </SCard>\n                );\n              }\n              return null;\n            })}\n          </SInfiniteScroll>\n        ) : (\n          <Message>등록된 대여 상품이 없습니다.</Message>\n        )\n      ) : (\n        <Spin size=\"default\" />\n      )}\n    </>\n  );\n};\n\nexport default MiniPostList;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport MiniPostList from \"../../Components/MiniPostList/MiniPostList\";\n\nconst Container = styled.div`\n  margin-top: 10px;\n  width: 80vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <Container>\n      <MiniPostList />\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ISProps } from \"../types/custom\";\n\nconst Img = styled.img`\n  position: relative;\n  width: auto;\n  max-height: 5vw;\n  @media screen and (max-width: ${(props: ISProps) => props.theme.minWidth}) {\n    max-height: 13vw;\n  }\n`;\n\nconst Logo: React.FC = () => {\n  return <Img src={require(\"../Images/main_logo.png\")} alt=\"이웃집대여소\" />;\n};\n\nexport default Logo;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TTheme } from \"../styles/theme\";\n\ninterface ISprops {\n  theme: TTheme;\n}\n\nconst SInput = styled.input`\n  border: 0;\n  border-radius: ${(props: ISprops) => props.theme.borderRadius};\n  background-color: ${(props: ISprops) => props.theme.bgColor};\n  height: 35px;\n  font-size: ${(props: ISprops) => props.theme.searchFontSize};\n  padding: 0px 15px;\n`;\n\ninterface IProps {\n  placeholder: string;\n  onChange: React.ChangeEventHandler;\n  value: string;\n  required?: boolean;\n  type?: string;\n  className?: string;\n}\n\nconst Input: React.FC<IProps> = ({\n  placeholder,\n  value,\n  onChange,\n  required = true,\n  type = \"text\",\n  className\n}) => (\n  <SInput\n    placeholder={placeholder}\n    required={required}\n    value={value}\n    onChange={onChange}\n    type={type}\n    className={className}\n  />\n);\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Drawer, Button } from \"antd\";\nimport { MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { ISProps } from \"../types/custom\";\n\nconst MenuBtn = styled(Button)`\n  width: ${(props: ISProps) => props.theme.iconSize};\n  height: auto;\n`;\n\nconst BtnIcon = styled(MenuUnfoldOutlined)`\n  color: ${(props: ISProps) => props.theme.bgColor};\n  font-size: ${(props: ISProps) => props.theme.iconSize};\n  @media screen and (max-width: ${(props: ISProps) => props.theme.minWidth}) {\n    font-size: calc(${(props: ISProps) => props.theme.iconSize} * 2);\n  }\n`;\n\nconst CategoryColumn = styled.div`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nconst CateDrawer: React.FC = () => {\n  const [visible, setVisible] = useState<boolean>(false); // drawer 보일지 말지\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const drawerToggle = () => {\n    if (visible) {\n      return setVisible(false);\n    }\n    return setVisible(true);\n  };\n\n  const onClick = () => {\n    // 개별 카테고리 링크 클릭시 drawer 닫기\n    setVisible(false);\n  };\n\n  return (\n    <>\n      <MenuBtn\n        onClick={drawerToggle}\n        ghost={true}\n        icon={<BtnIcon />}\n        type=\"link\"\n      />\n      <Drawer\n        title=\"카테고리\"\n        placement=\"left\"\n        closable={false}\n        onClose={onClose}\n        visible={visible}\n        width={\"200px\"}\n      >\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/digital\">디지털/가전</Link>\n        </CategoryColumn>\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/fashion\">패션</Link>\n        </CategoryColumn>\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/sports\">스포츠/레저</Link>\n        </CategoryColumn>\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/child\">유아동</Link>\n        </CategoryColumn>\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/household\">생활용품</Link>\n        </CategoryColumn>\n        <CategoryColumn onClick={onClick}>\n          <Link to=\"/category/etc\">기타</Link>\n        </CategoryColumn>\n      </Drawer>\n    </>\n  );\n};\n\nexport default CateDrawer;\n","import { gql } from \"apollo-boost\";\n\nexport const LOG_USER_IN = gql`\n  mutation logUserIn($token: String!) {\n    logUserIn(token: $token) @client\n  }\n`;\n\nexport const LOG_USER_OUT = gql`\n  mutation logUserOut {\n    logUserOut @client\n  }\n`;\n\nexport const IS_LOGGED_IN = gql`\n  query checkLogin {\n    auth @client {\n      isLoggedIn\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\n\nexport const LOGIN = gql`\n  mutation login($userId: String!, $password: String!) {\n    Login(userId: $userId, password: $password) {\n      ok\n      error\n      token\n      username\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, Input, Button, message } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n\nimport { TTheme } from \"../../styles/theme\";\nimport { LOG_USER_IN } from \"../../LocalQueries\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { LOGIN } from \"./Login.queries\";\nimport { loginVariables, login } from \"../../types/api\";\n\ninterface ISProps {\n  theme: TTheme;\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n`;\n\nconst BtnWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst BasicBtn = styled(Button)`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  max-width: cals(${(props: ISProps) => props.theme.searchFontSize} * 3);\n  height: auto;\n`;\n\nconst SLink = styled(Link)`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  color: ${(props: ISProps) => props.theme.blueColor};\n  border-bottom: 1px solid ${(props: ISProps) => props.theme.blueColor};\n  margin-top: 10px;\n  &:hover {\n    color: ${(props: ISProps) => props.theme.pinkColor};\n    border-bottom: 1px solid ${(props: ISProps) => props.theme.pinkColor};\n  }\n`;\n\nconst SItem = styled(Form.Item)`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n`;\n\ninterface IProps {\n  setLoginModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setDrawVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  setSignupModal: React.Dispatch<React.SetStateAction<boolean>>;\n  loginModalBool: boolean;\n}\n\ninterface IFormValue {\n  userId: string;\n  password: string;\n}\n\nconst Login: React.FC<IProps> = ({\n  setLoginModal,\n  setDrawVisible,\n  setSignupModal,\n  loginModalBool\n}) => {\n  const [form] = Form.useForm();\n\n  const [userLogInMutation] = useMutation(LOG_USER_IN);\n  const [loginMutaion, { loading }] = useMutation<login, loginVariables>(\n    LOGIN,\n    {\n      onCompleted: async data => {\n        const { Login } = data;\n        if (Login.ok) {\n          if (Login.token) {\n            try {\n              await userLogInMutation({\n                variables: {\n                  token: Login.token\n                }\n              });\n            } catch (error) {\n              message.error(error);\n            }\n          }\n          message.success(`${Login.username} 님 환영합니다.`);\n          form.resetFields();\n          setLoginModal(false);\n          setDrawVisible(false);\n        } else {\n          message.error(Login.error);\n        }\n      }\n    }\n  );\n\n  const onFinish = async values => {\n    const { userId, password } = values;\n    await loginMutaion({\n      variables: {\n        userId,\n        password\n      }\n    });\n  };\n\n  const onSignup = () => {\n    form.resetFields();\n    setLoginModal(false);\n    setSignupModal(true);\n  };\n\n  useEffect(() => {\n    form.resetFields();\n  }, [loginModalBool, form]);\n\n  return (\n    <Container>\n      <Form\n        name=\"normal_login\"\n        form={form}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <SItem\n          name=\"userId\"\n          rules={[{ required: true, message: \"아이디를 작성해 주세요\" }]}\n        >\n          <Input prefix={<UserOutlined />} placeholder=\"아이디\" />\n        </SItem>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"비밀번호를 작성해 주세요\" }]}\n        >\n          <Input\n            prefix={<LockOutlined />}\n            type=\"password\"\n            placeholder=\"비밀번호\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <BtnWrapper>\n            <BasicBtn loading={loading} htmlType=\"submit\">\n              로그인\n            </BasicBtn>\n            <SLink to=\"\" onClick={onSignup}>\n              회원가입으로 이동\n            </SLink>\n          </BtnWrapper>\n        </Form.Item>\n      </Form>\n    </Container>\n  );\n};\n\nexport default Login;\n","import { gql } from \"apollo-boost\";\n\nexport const SIGN_UP = gql`\n  mutation SignUp(\n    $userId: String!\n    $username: String!\n    $password: String!\n    $info: String!\n    $phoneNumber: String!\n  ) {\n    SignUp(\n      userId: $userId\n      username: $username\n      password: $password\n      info: $info\n      phoneNumber: $phoneNumber\n    ) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const VERIFY_START = gql`\n  mutation VerifyStart($phoneNumber: String!) {\n    VerifyStart(phoneNumber: $phoneNumber) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const VERIFY_COMPLETE = gql`\n  mutation VerifyComplete($phoneNumber: String!, $secretKey: String!) {\n    VerifyComplete(phoneNumber: $phoneNumber, secretKey: $secretKey) {\n      ok\n      error\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, Input, Tooltip, Button, message, notification } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nimport { TTheme } from \"../../styles/theme\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { VERIFY_START, VERIFY_COMPLETE, SIGN_UP } from \"./SignUp.queries\";\nimport {\n  VerifyStart,\n  VerifyStartVariables,\n  VerifyComplete,\n  VerifyCompleteVariables,\n  SignUp,\n  SignUpVariables\n} from \"../../types/api\";\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 12 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 12 },\n    sm: { span: 8 }\n  }\n};\n\ninterface ISProps {\n  theme: TTheme;\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst SForm = styled(Form)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 55vw;\n  flex-direction: column;\n  padding: 0px;\n  flex-wrap: wrap;\n`;\n\nconst SFromItem = styled(Form.Item)`\n  min-width: 55vw;\n  height: auto;\n  margin: 0.5vw 0vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Label = styled.div`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n`;\n\nconst SInput = styled(Input)`\n  min-width: 180px;\n  height: auto;\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  &::placeholder {\n    font-size: 1vw;\n  }\n`;\n\nconst SInputPassword = styled(Input.Password)`\n  min-width: 180px;\n  max-width: 35vw;\n  height: auto;\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n`;\n\nconst SInputTextArea = styled(Input.TextArea)`\n  min-width: 180px;\n  max-width: 35vw;\n  height: auto;\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  resize: none;\n`;\n\nconst BtnFormItem = styled(SFromItem)`\n  width: 20vw;\n  min-width: 0px;\n  height: auto;\n`;\n\nconst SButton = styled(Button)`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  padding: 0px 2px;\n  &:hover {\n    color: ${(props: ISProps) => props.theme.pinkColor};\n  }\n`;\n\ninterface IProps {\n  setSignupModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setLoginModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst SignUpCompo: React.FC<IProps> = ({ setSignupModal, setLoginModal }) => {\n  const [form] = Form.useForm();\n\n  const [modifiedPhone, setModifiedPhone] = useState<string>(\"\");\n\n  // 휴대폰 비밀문자 인증 요청\n  const [verifyPhoneMutation, { loading: verifyLoading }] = useMutation<\n    VerifyStart,\n    VerifyStartVariables\n  >(VERIFY_START, {\n    onCompleted: () =>\n      message.success(\n        `${form.getFieldValue(\"phone\")}으로 인증번호가 전송되었습니다.`\n      )\n  });\n\n  // 휴대폰 비밀문자 인증 확인\n  const [verfiyCompleteMutation, { loading: completeLoading }] = useMutation<\n    VerifyComplete,\n    VerifyCompleteVariables\n  >(VERIFY_COMPLETE);\n\n  // 회원 가입\n  const [signUpMutation, { loading: signupLoading }] = useMutation<\n    SignUp,\n    SignUpVariables\n  >(SIGN_UP, {\n    onCompleted: data => {\n      const { SignUp: { ok = false, error = null } = {} } = data;\n      if (ok) {\n        notification.success({\n          message: \"회원가입이 완료되었습니다\",\n          description: \"로그인 창으로 이동합니다.\"\n        });\n        form.resetFields();\n        setSignupModal(false);\n        setLoginModal(true);\n      } else {\n        notification.error({\n          message: \"회원가입이 오류\",\n          description: error\n        });\n      }\n    },\n    onError: error => {\n      notification.error({\n        message: \"회원가입이 오류\",\n        description: error\n      });\n    }\n  });\n\n  const onFinish = async values => {\n    const { nickname, id, password, secretKey, info } = values;\n    try {\n      await verfiyCompleteMutation({\n        variables: {\n          phoneNumber: modifiedPhone,\n          secretKey\n        }\n      });\n      await signUpMutation({\n        variables: {\n          userId: id,\n          username: nickname,\n          password,\n          info,\n          phoneNumber: modifiedPhone\n        }\n      });\n    } catch (error) {\n      message.error(error);\n    }\n  };\n\n  const onVerify = async () => {\n    // 인증문자 발생\n    const phoneNum: string = form.getFieldValue(\"phone\");\n    console.log(phoneNum);\n    const isValid = /^(?:(010-?\\d{4})|(01[1|6|7|8|9]-?\\d{3,4}))-?\\d{4}$/.test(\n      phoneNum\n    );\n    if (isValid) {\n      const modifiedPhoneNum = `+82${phoneNum.slice(1)}`;\n      setModifiedPhone(modifiedPhoneNum);\n      console.log(\"realphone\", modifiedPhoneNum);\n      try {\n        await verifyPhoneMutation({\n          variables: {\n            phoneNumber: modifiedPhoneNum\n          }\n        });\n      } catch (error) {\n        message.error(error);\n      }\n    } else {\n      message.error(\"올바른 휴대전화 번호를 작성해주세요\");\n    }\n  };\n\n  return (\n    <Container>\n      <SForm\n        {...formItemLayout}\n        onFinish={onFinish}\n        form={form}\n        scrollToFirstError\n        labelAlign=\"left\"\n        colon={false}\n      >\n        <SFromItem\n          name=\"nickname\"\n          label={\n            <Label>\n              닉네임&nbsp;\n              <Tooltip title=\"상점이름을 입력해 주세요\">\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </Label>\n          }\n          rules={[\n            {\n              required: true,\n              message: \"상점이름을 입력해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInput />\n        </SFromItem>\n        <SFromItem\n          name=\"id\"\n          label={<Label>아이디</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"아이디를 입력해주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInput />\n        </SFromItem>\n\n        <SFromItem\n          name=\"password\"\n          label={<Label>비밀번호</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"10자리 이상의 비밀번호를 작성해 주세요\",\n              min: 10\n            }\n          ]}\n          hasFeedback\n        >\n          <SInputPassword placeholder=\"10자리 이상\" />\n        </SFromItem>\n        <SFromItem\n          name=\"confirm\"\n          label={<Label>비밀번호 확인</Label>}\n          dependencies={[\"password\"]}\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: \"비밀번호 확인란을 작성해주세요\"\n            },\n            ({ getFieldValue }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue(\"password\") === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(\"비밀번호가 같은지 확인 해주세요\");\n              }\n            })\n          ]}\n        >\n          <SInputPassword />\n        </SFromItem>\n        <SFromItem\n          name=\"info\"\n          label={<Label>상점 소개글</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"상점 소개글을 작성해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInputTextArea autoSize={true} />\n        </SFromItem>\n\n        <SFromItem\n          name=\"phone\"\n          label={<Label>휴대전화</Label>}\n          rules={[{ required: true, message: \"휴대전화 번호를 작성해 주세요\" }]}\n        >\n          <SInput />\n        </SFromItem>\n        <SFromItem\n          name=\"secretKey\"\n          label={\n            <SButton loading={verifyLoading} onClick={onVerify} type=\"dashed\">\n              인증번호 전송\n            </SButton>\n          }\n          rules={[\n            {\n              required: true,\n              message: \"해당 번호로 발송된 인증 번호를 입력해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInput placeholder=\"전송된 인증번호 입력\" />\n        </SFromItem>\n        <BtnFormItem>\n          <SButton\n            loading={completeLoading || signupLoading}\n            type=\"link\"\n            htmlType=\"submit\"\n          >\n            회원가입\n          </SButton>\n        </BtnFormItem>\n      </SForm>\n    </Container>\n  );\n};\n\nexport default SignUpCompo;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Drawer, Modal, Button, message, Popconfirm } from \"antd\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\n\nimport { IS_LOGGED_IN, LOG_USER_OUT } from \"../LocalQueries\";\nimport Login from \"./Login/Login\";\nimport SignUp from \"./SignUp/SignUp\";\nimport routes from \"../Routes/routes\";\nimport { ISProps } from \"../types/custom\";\n\nconst MenuBtn = styled(Button)`\n  width: ${(props: ISProps) => props.theme.iconSize};\n  height: auto;\n`;\n\nconst BtnIcon = styled(UserOutlined)`\n  color: ${(props: ISProps) => props.theme.bgColor};\n  font-size: ${(props: ISProps) => props.theme.iconSize};\n  @media screen and (max-width: ${(props: ISProps) => props.theme.minWidth}) {\n    font-size: calc(${(props: ISProps) => props.theme.iconSize} * 2);\n  }\n`;\n\nconst CategoryColumn = styled.div`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nconst SModal = styled(Modal)`\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  width: 40vw;\n  height: auto;\n`;\n\nconst UserDrawer: React.FC = () => {\n  const [drawerVisible, setDrawVisible] = useState<boolean>(false);\n  const [loginModalBool, setLoginModal] = useState<boolean>(false);\n  const [signupModalBool, setSignupModal] = useState<boolean>(false);\n\n  // 위치 변경시 drawer 닫기\n  const location = useLocation();\n\n  const [userLogoutMutation] = useMutation(LOG_USER_OUT);\n\n  // drawer 열기/닫기\n  const drawerToggle = () => {\n    if (drawerVisible) {\n      return setDrawVisible(false);\n    }\n    return setDrawVisible(true);\n  };\n\n  // 로그인 여부 확인\n  const { data: { auth: { isLoggedIn = null } = {} } = {} } = useQuery(\n    IS_LOGGED_IN\n  );\n\n  // modal 열기/닫기\n  const onLoginClick = () => {\n    return setLoginModal(true);\n  };\n\n  const loginHandle = () => {\n    return setLoginModal(false);\n  };\n\n  // 로그아웃\n  const onLogoutClick = async () => {\n    await userLogoutMutation();\n    message.success(\"로그아웃 되었습니다.\");\n    return setDrawVisible(false);\n  };\n\n  // 로그아웃 중도 취소\n  const onLogoutCancel = () => {\n    return;\n  };\n\n  // 회원가입\n  const signupHandle = () => {\n    return setSignupModal(false);\n  };\n\n  const onSignupClick = () => {\n    return setSignupModal(true);\n  };\n\n  useEffect(() => {\n    setDrawVisible(false);\n  }, [location]);\n\n  return (\n    <>\n      <MenuBtn\n        onClick={drawerToggle}\n        ghost={true}\n        icon={<BtnIcon />}\n        type=\"link\"\n      />\n      <Drawer\n        title=\"내정보\"\n        placement=\"right\"\n        closable={false}\n        onClose={drawerToggle}\n        visible={drawerVisible}\n        width={\"150px\"}\n      >\n        {isLoggedIn ? (\n          <>\n            <CategoryColumn>\n              <Link to={routes.MYSHOP}>나의 상점</Link>\n            </CategoryColumn>\n            <CategoryColumn>\n              <Link to={routes.MYLOG}>나의 내역</Link>\n            </CategoryColumn>\n            <CategoryColumn>\n              <Link to={routes.UPLOAD}>상품 올리기</Link>\n            </CategoryColumn>\n            <CategoryColumn>\n              <Popconfirm\n                title=\"로그아웃 하시겠습니까?\"\n                onConfirm={onLogoutClick}\n                onCancel={onLogoutCancel}\n                okText=\"네\"\n                cancelText=\"아니요\"\n              >\n                <Link to=\"\">로그아웃</Link>\n              </Popconfirm>\n            </CategoryColumn>\n          </>\n        ) : (\n          <>\n            <CategoryColumn>\n              <Link to=\"\" onClick={onLoginClick}>\n                로그인\n              </Link>\n            </CategoryColumn>\n            <CategoryColumn>\n              <Link to=\"\" onClick={onSignupClick}>\n                회원가입\n              </Link>\n            </CategoryColumn>\n          </>\n        )}\n      </Drawer>\n      <Modal\n        title=\"로그인\"\n        visible={loginModalBool}\n        footer={null}\n        onOk={loginHandle}\n        onCancel={loginHandle}\n      >\n        <Login\n          setLoginModal={setLoginModal}\n          setDrawVisible={setDrawVisible}\n          setSignupModal={setSignupModal}\n          loginModalBool={loginModalBool}\n        />\n      </Modal>\n      <SModal\n        title=\"회원가입\"\n        visible={signupModalBool}\n        footer={null}\n        onOk={signupHandle}\n        onCancel={signupHandle}\n      >\n        <SignUp setSignupModal={setSignupModal} setLoginModal={setLoginModal} />\n      </SModal>\n    </>\n  );\n};\n\nexport default UserDrawer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { TTheme } from \"../styles/theme\";\nimport Logo from \"./Logo\";\nimport routes from \"../Routes/routes\";\nimport Input from \"./Input\";\nimport useInput from \"../Hooks/useInput\";\nimport CateDrawer from \"./CateDrawer\";\nimport UserDrawer from \"./UserDrawer\";\nimport { ISProps } from \"../types/custom\";\n\ninterface ISprops {\n  theme: TTheme;\n}\n\nconst Container = styled.header`\n  z-index: 10;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100px;\n  background-color: ${(props: ISprops) => props.theme.blueColor};\n  padding: 15px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst Wrapper = styled.header`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 60vw;\n  @media screen and (max-width: ${(props: ISProps) => props.theme.minWidth}) {\n    flex-direction: column;\n  }\n`;\n\nconst SLink = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: auto;\n  width: 50vw;\n`;\n\nconst SearchInput = styled(Input)`\n  background-color: ${(props: ISprops) => props.theme.bgColor};\n  padding: 5px;\n  padding-left: 15px;\n  border-radius: ${(props: ISprops) => props.theme.borderRadius};\n  height: 2vw;\n  width: 60vw;\n  font-size: ${(props: ISprops) => props.theme.searchFontSize};\n  &::placeholder {\n    opacity: 0.8;\n    font-weight: 400;\n  }\n  &:focus {\n    box-shadow: -2px -2px 10px pink, 2px 2px 10px pink;\n  }\n  @media screen and (max-width: ${(props: ISProps) => props.theme.minWidth}) {\n    height: 5vw;\n  }\n`;\n\nconst Header: React.FC = () => {\n  const search = useInput(\"\");\n  const history = useHistory();\n\n  const onSearchSubmit: React.FormEventHandler = event => {\n    event.preventDefault();\n    history.push(`/search?term=${search.value}`);\n    search.setValue(\"\");\n  };\n\n  return (\n    <Container>\n      <CateDrawer />\n      <Wrapper>\n        <SLink to={routes.HOME}>\n          <Logo />\n        </SLink>\n        <Form onSubmit={onSearchSubmit}>\n          <SearchInput\n            value={search.value}\n            onChange={search.onChange}\n            placeholder=\"상품명\"\n          />\n        </Form>\n      </Wrapper>\n      <UserDrawer />\n    </Container>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nexport default (initValue: string) => {\n  const [value, setValue] = useState<string>(initValue);\n\n  const onChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLSelectElement\n  > = event => {\n    const {\n      target: { value }\n    } = event;\n    setValue(value);\n  };\n  return { value, onChange, setValue };\n};\n","import { gql } from \"apollo-boost\";\n\nexport const SEARCH = gql`\n  query Search($term: String!, $pageNumber: Int!, $items: Int!) {\n    SearchPost(term: $term, pageNumber: $pageNumber, items: $items) {\n      error\n      posts {\n        id\n        title\n        files {\n          url\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { SEARCH } from \"./Search.queries\";\nimport { Search } from \"../../types/api\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ISProps } from \"../../types/custom\";\nimport { Card, Spin } from \"antd\";\n\nconst Container = styled.div`\n  margin-top: 10px;\n  width: 80vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SInfiniteScroll = styled(InfiniteScroll)`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 20px;\n  padding: 10px;\n  justify-items: center;\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  height: 400px;\n`;\n\nconst SCard = styled(Card)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  width: 200px;\n  height: 300px;\n  box-shadow: 1px 1px 10px black;\n  > .ant-card-body {\n    padding: 5px 5px 15px;\n  }\n`;\n\nconst CardImg = styled.img`\n  width: 200px;\n  height: 200px;\n`;\n\nconst CardTittl = styled.p`\n  font-weight: 800;\n  padding: 0px 3px;\n`;\n\nconst Message = styled.div`\n  font-weight: 900;\n`;\n\nconst SearchContainer: React.FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n\n  const { term } = queryString.parse(location.search); // 입력 받은 검색어\n  const items = 10; // 쿼리 당 가져올 post 갯수\n\n  const { data, loading, fetchMore } = useQuery<Search>(SEARCH, {\n    variables: {\n      term,\n      items,\n      pageNumber: 0\n    },\n    fetchPolicy: \"cache-and-network\"\n  });\n\n  const onLoadMore = () => {\n    try {\n      fetchMore({\n        variables: {\n          pageNumber: data?.SearchPost?.posts!.length,\n          items,\n          term\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          // updateQuery를 통해 기존 data에 새로운 data 추가\n          if (fetchMoreResult?.SearchPost?.error) return prev;\n          return Object.assign({}, prev, {\n            SearchPost: {\n              ...prev!.SearchPost!,\n              posts: [\n                ...prev!.SearchPost!.posts!,\n                ...fetchMoreResult!.SearchPost!.posts!\n              ]\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onClick = (postId: string) => () => {\n    history.push(`/post/${postId}`);\n  };\n\n  console.log(\"data\", data);\n  return (\n    <Container>\n      <>\n        {!loading ? (\n          data &&\n          data.SearchPost &&\n          data.SearchPost.posts &&\n          data.SearchPost.posts!.length !== 0 ? (\n            <SInfiniteScroll\n              dataLength={data.SearchPost!.posts!.length}\n              next={onLoadMore}\n              hasMore={true}\n              loader={null}\n            >\n              {data.SearchPost!.posts!.map(post => {\n                if (post) {\n                  return (\n                    <SCard\n                      onClick={onClick(post.id)}\n                      key={post.id}\n                      cover={\n                        <CardImg alt=\"상품 사진\" src={post!.files![0]!.url} />\n                      }\n                      hoverable\n                    >\n                      <CardTittl>{post.title}</CardTittl>\n                    </SCard>\n                  );\n                }\n                return null;\n              })}\n            </SInfiniteScroll>\n          ) : (\n            <Message>등록된 대여 상품이 없습니다.</Message>\n          )\n        ) : (\n          <Spin size=\"default\" />\n        )}\n      </>\n    </Container>\n  );\n};\n\nexport default SearchContainer;\n","import { gql } from \"apollo-boost\";\n\nexport const UPLOAD = gql`\n  mutation UploadPost(\n    $title: String!\n    $location: String!\n    $desc: String!\n    $category: String!\n    $files: [String!]\n  ) {\n    UploadPost(\n      title: $title\n      location: $location\n      desc: $desc\n      category: $category\n      files: $files\n    ) {\n      ok\n      error\n      post {\n        id\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Upload, Modal, Button, message, Form, Input, Select } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport reqwest from \"reqwest\";\nimport styled from \"styled-components\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { TTheme } from \"../styles/theme\";\nimport { UploadPost, UploadPostVariables } from \"../types/api\";\nimport { UPLOAD } from \"../Routes/Upload/Uplaod.queries\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 12 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 12 },\n    sm: { span: 8 }\n  }\n};\n\ninterface ISProps {\n  theme: TTheme;\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  margin-top: ${(props: ISProps) => props.theme.basicMarginTop};\n  box-shadow: 1px 1px 5px black;\n`;\n\nconst Tittle = styled.div`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2);\n  font-weight: 800;\n  margin: 5px 0px;\n`;\n\nconst SForm = styled(Form)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 55vw;\n  flex-direction: column;\n  padding: 15px;\n  flex-wrap: wrap;\n`;\n\nconst SFromItem = styled(Form.Item)`\n  min-width: 55vw;\n  height: auto;\n  margin: 0.5vw 0vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Label = styled.div`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n`;\n\nconst SInput = styled(Input)`\n  min-width: 180px;\n  height: auto;\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  &::placeholder {\n    font-size: 1vw;\n  }\n`;\n\nconst SInputTextArea = styled(Input.TextArea)`\n  min-width: 180px;\n  max-width: 35vw;\n  height: auto;\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  resize: none;\n`;\n\nconst ImgWrapper = styled.div``;\n\nconst BtnFormItem = styled(SFromItem)`\n  width: 20vw;\n  min-width: 0px;\n  height: auto;\n`;\n\nconst PostUploader: React.FC = () => {\n  const [previewVisible, setPreviewVisible] = useState<boolean>(false);\n  const [previewImage, setPreviewImage] = useState<string>(\"\");\n  const [fileList, setFileList] = useState<any[]>([]);\n  const [uploadList, setUploadList] = useState<any[]>([]);\n  const [uploading, setUploading] = useState<boolean>(false);\n\n  const history = useHistory();\n\n  // form 접근\n  const [form] = Form.useForm();\n\n  // post 업로드 mutation\n  const [uploadMutation, { loading }] = useMutation<\n    UploadPost,\n    UploadPostVariables\n  >(UPLOAD, {\n    onCompleted: data => {\n      const {\n        UploadPost: { ok, error, post }\n      } = data;\n      if (ok && post) {\n        form.resetFields();\n        message.success(\"해당 게시물이 등록되었습니다.\");\n        history.push(`post/${post.id}`);\n        return;\n      }\n      message.error(error);\n    }\n  });\n\n  const handleCancel = () => setPreviewVisible(false);\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewImage(file.url || file.preview);\n    setPreviewVisible(true);\n  };\n\n  const handleChange = ({ fileList }) => {\n    setFileList(fileList);\n  };\n\n  const beforeUpload = file => {\n    setUploadList([...uploadList, file]);\n    return false;\n  };\n\n  const onRemove = file => {\n    const index = fileList.indexOf(file);\n    const newFileList = fileList.slice();\n    newFileList.splice(index, 1);\n    setFileList(newFileList);\n\n    const uploadListIndex = uploadList.indexOf(file);\n    const newUploadList = uploadList.slice();\n    newUploadList.splice(uploadListIndex, 1);\n    setUploadList(newUploadList);\n  };\n\n  const handleUpload = async values => {\n    const { title, location, desc, category } = values;\n\n    const formData = new FormData();\n    uploadList.forEach(file => {\n      formData.append(\"files\", file);\n    });\n    setUploading(true);\n\n    // You can use any AJAX library you like\n    // console.log(\"form 데이터\", formData.getAll(\"file\"));\n    // await axios({\n    //   url: \"http://localhost:4000/api/upload\",\n    //   method: \"post\",\n    //   data: formData\n    // });\n    try {\n      const data = await reqwest({\n        url: \"http://localhost:4000/api/upload\",\n        method: \"post\",\n        processData: false,\n        data: formData,\n        success: () => {\n          setFileList([]);\n          setUploadList([]);\n          setUploading(false);\n        },\n        error: () => {\n          setUploading(false);\n          message.error(\"upload failed.\");\n        },\n        contentType: \"multipart/form-data\"\n      });\n      await uploadMutation({\n        variables: {\n          title,\n          location,\n          desc,\n          category,\n          files: data\n        }\n      });\n    } catch (error) {\n      message.error(error);\n    }\n  };\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  );\n\n  return (\n    <Container>\n      <Tittle>상품 등록하기</Tittle>\n      <SForm\n        {...formItemLayout}\n        onFinish={handleUpload}\n        form={form}\n        scrollToFirstError\n        labelAlign=\"left\"\n        colon={false}\n      >\n        <SFromItem\n          name=\"title\"\n          label={<Label>제목</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"제목을 입력해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInput placeholder=\"예시: 플스4 대여합니다.\" />\n        </SFromItem>\n        <SFromItem\n          name=\"location\"\n          label={<Label>지역</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"지역을 입력해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInput placeholder=\"예시: 서울특별시\" />\n        </SFromItem>\n        <SFromItem\n          name=\"desc\"\n          label={<Label>상품 설명</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"상품 설명을 작성해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <SInputTextArea autoSize={true} />\n        </SFromItem>\n        <SFromItem\n          name=\"category\"\n          label={<Label>카테고리</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"카테고리를 선택해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <Select placeholder=\"카테고리 선택\">\n            <Select.Option value=\"DIGITAL\">디지털/가전</Select.Option>\n            <Select.Option value=\"FASHION\">패션</Select.Option>\n            <Select.Option value=\"SPORTS\">스포츠/레저</Select.Option>\n            <Select.Option value=\"CHILD\">유아동</Select.Option>\n            <Select.Option value=\"HOUSEHOLD\">생활용품</Select.Option>\n            <Select.Option value=\"ETC\">기타</Select.Option>\n          </Select>\n        </SFromItem>\n        <SFromItem\n          name=\"image\"\n          label={<Label>상품사진</Label>}\n          rules={[\n            {\n              required: true,\n              message: \"상품 사진을 등록해 주세요\",\n              whitespace: true\n            }\n          ]}\n        >\n          <ImgWrapper>\n            <Upload\n              listType=\"picture-card\"\n              fileList={fileList}\n              onPreview={handlePreview}\n              onChange={handleChange}\n              beforeUpload={beforeUpload}\n              onRemove={onRemove}\n            >\n              {fileList.length >= 5 ? null : uploadButton}\n            </Upload>\n            <Modal\n              visible={previewVisible}\n              footer={null}\n              onCancel={handleCancel}\n            >\n              <img\n                alt=\"상품 사진 미리보기\"\n                style={{ width: \"100%\" }}\n                src={previewImage}\n              />\n            </Modal>\n          </ImgWrapper>\n        </SFromItem>\n        <BtnFormItem>\n          <Button\n            type=\"primary\"\n            disabled={fileList.length === 0}\n            loading={uploading || loading}\n            htmlType=\"submit\"\n          >\n            상품 등록\n          </Button>\n        </BtnFormItem>\n      </SForm>\n    </Container>\n  );\n};\n\nexport default PostUploader;\n","import { notification } from \"antd\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { IS_LOGGED_IN } from \"../LocalQueries\";\nimport { useHistory } from \"react-router-dom\";\nimport routes from \"../Routes/routes\";\n\nconst NeedLoginNotification = () => {\n  const { data: { auth: { isLoggedIn = false } = {} } = {} } = useQuery(\n    IS_LOGGED_IN\n  );\n  const history = useHistory();\n  if (!isLoggedIn) {\n    notification.error({\n      message: \"로그인 해주세요\",\n      description: \"회원전용 페이지 입니다\"\n    });\n    history.push(routes.HOME);\n  }\n};\n\nexport default NeedLoginNotification;\n","import React from \"react\";\nimport PostUploader from \"../../Components/PostUploader\";\nimport NeedLoginNotification from \"../../Components/NeedLoginNotification\";\n\nconst UploadPost: React.FC = () => {\n  NeedLoginNotification();\n  return <PostUploader />;\n};\n\nexport default UploadPost;\n","import { gql } from \"apollo-boost\";\n\nexport const POST_DETAIL = gql`\n  query PostDetail($postId: String!) {\n    PostDetail(postId: $postId) {\n      ok\n      error\n      post {\n        id\n        user {\n          id\n          username\n        }\n        title\n        location\n        desc\n        category\n        files {\n          url\n        }\n        comments {\n          text\n          user {\n            id\n            username\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const RENT = gql`\n  mutation ReqRent($postId: String!, $message: String!) {\n    ReqRent(postId: $postId, message: $message) {\n      ok\n      error\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\n\nexport const CREATE_COMMENT = gql`\n  mutation CreateComment($text: String!, $postId: String!) {\n    CreateComment(text: $text, postId: $postId) {\n      ok\n      error\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_ME = gql`\n  query GetMe {\n    GetMe {\n      error\n      user {\n        username\n        posts {\n          id\n          rents {\n            id\n            status\n            message\n          }\n          title\n          files {\n            id\n            url\n          }\n        }\n        rents {\n          post {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const RENT_STAUTS = gql`\n  mutation RentStatusUpdate($status: String!, $rentId: String!) {\n    RentStatusUpdate(status: $status, rentId: $rentId) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const GET_MY_RENTS = gql`\n  query GetMyRents {\n    GetMe {\n      error\n      user {\n        rents {\n          id\n          status\n          post {\n            id\n            title\n            files {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Comment, Form, Button, List, Input, notification } from \"antd\";\nimport styled from \"styled-components\";\n\nimport { IComment } from \"../PostCard\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { CREATE_COMMENT } from \"./Comments.queries\";\nimport { CreateComment, CreateCommentVariables, GetMe } from \"../../types/api\";\nimport { useParams } from \"react-router-dom\";\nimport { GET_ME } from \"../../shared.queries\";\nimport { ISProps } from \"../../types/custom\";\n\nconst { TextArea } = Input;\n\ninterface IEditor {\n  onChange: React.ChangeEventHandler;\n  onSubmit: React.FormEventHandler;\n  submitting: boolean;\n  value: string;\n}\n\ninterface IDBComments {\n  comments?: (IComment | any)[] | null;\n}\n\nconst CommentBtn = styled(Button)`\n  background-color: ${(props: ISProps) => props.theme.pinkColor};\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1);\n  min-width: calc(${(props: ISProps) => props.theme.searchFontSize} * 3);\n  padding: 2px 5px;\n  height: auto;\n  text-align: center;\n  align-self: flex-end;\n`;\n\n// 댓글 목록\nconst CommentList: React.FC<IDBComments> = ({ comments }) => (\n  <List\n    dataSource={comments && comments!.length ? comments : undefined}\n    header={`${comments!.length} ${\n      comments && comments.length > 1 ? \"replies\" : \"reply\"\n    }`}\n    itemLayout=\"horizontal\"\n    renderItem={(props: IComment) => (\n      <Comment content={<p>{props.text}</p>} author={props.user.username} />\n    )}\n  />\n);\n\n// 댓글 작성란\nconst Editor: React.FC<IEditor> = ({\n  onChange,\n  onSubmit,\n  submitting,\n  value\n}) => (\n  <>\n    <Form.Item>\n      <TextArea\n        rows={4}\n        onChange={onChange}\n        value={value}\n        placeholder=\"댓글을 작성해 주세요\"\n      />\n    </Form.Item>\n    <Form.Item>\n      <CommentBtn\n        htmlType=\"submit\"\n        loading={submitting}\n        onClick={onSubmit}\n        type=\"primary\"\n      >\n        댓글 추가\n      </CommentBtn>\n    </Form.Item>\n  </>\n);\n\n// 메인\nconst Comments: React.FC<IDBComments> = ({ comments }) => {\n  const { postId } = useParams();\n\n  const [commentsArr, setCommentsArr] = useState<IComment[]>(\n    comments ? comments : []\n  );\n  const [value, setValue] = useState<string>(\"\");\n\n  const { data: getMeData, loading: meLoading } = useQuery<GetMe>(GET_ME);\n\n  const [commentMutation, { loading: addLoading }] = useMutation<\n    CreateComment,\n    CreateCommentVariables\n  >(CREATE_COMMENT, {\n    onCompleted: () => {\n      setCommentsArr([\n        ...commentsArr,\n        {\n          user: { username: getMeData!.GetMe!.user!.username },\n          text: value\n        }\n      ]);\n    },\n    onError: () => {\n      notification.error({\n        message: \"로그인 해주세요\",\n        description: \"댓글 작성을 위해서 로그인이 필요합니다.\"\n      });\n    }\n  });\n\n  const handleSubmit = async () => {\n    if (!value) {\n      return;\n    }\n    try {\n      await commentMutation({\n        variables: {\n          postId: postId ? postId : \"\",\n          text: value\n        }\n      });\n      setValue(\"\");\n    } catch (error) {}\n  };\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    const {\n      target: { value }\n    } = e;\n    setValue(value);\n  };\n\n  return (\n    <>\n      {commentsArr!.length > 0 && <CommentList comments={commentsArr} />}\n      <Comment\n        content={\n          <Editor\n            onChange={handleChange}\n            onSubmit={handleSubmit}\n            submitting={addLoading || meLoading}\n            value={value}\n          />\n        }\n      />\n    </>\n  );\n};\n\nexport default Comments;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Descriptions,\n  Carousel,\n  Button,\n  Modal,\n  notification,\n  Input,\n  Form,\n  Spin\n} from \"antd\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { useParams } from \"react-router-dom\";\n\nimport { ISProps } from \"../types/custom\";\nimport Comments from \"./Comments/Comments\";\nimport { ReqRent, ReqRentVariables } from \"../types/api\";\nimport { RENT } from \"../Routes/PostDetail/PostDetail.queries\";\nimport { IS_LOGGED_IN } from \"../LocalQueries\";\n\nconst Container = styled.div`\n  min-width: 300px;\n  width: 50vw;\n  box-shadow: 1px 1px 5px black;\n  padding: 10px;\n`;\n\nconst Header = styled.header`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0px 10px;\n  margin: 15px 0px;\n  border-bottom: 2px solid black;\n`;\n\nconst Title = styled.div`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2.5);\n  font-weight: 900;\n  padding-left: 10px;\n`;\n\nconst RentBtn = styled(Button)`\n  background-color: ${(props: ISProps) => props.theme.pinkColor};\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2);\n  min-width: calc(${(props: ISProps) => props.theme.searchFontSize} * 3);\n  padding: 2px 5px;\n  height: auto;\n  text-align: center;\n  align-self: flex-end;\n  margin: 7px 0px;\n`;\n\nconst SDescriptions = styled(Descriptions)`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2);\n`;\n\nconst SDescriptionsItem = styled(Descriptions.Item)`\n  width: 30vw;\n`;\n\nconst Label = styled.div`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.3);\n`;\n\nconst Text = styled.div`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.3);\n`;\n\nconst Desc = styled.p`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.3);\n`;\n\nconst SCarousel = styled(Carousel)`\n  min-width: 50vw;\n  height: 300px;\n  > .slick-dots li.slick-active button {\n    background-color: red;\n    cursor: default;\n  }\n  > .slick-dots li button {\n    background-color: green;\n  }\n`;\n\nconst ImgWrapper = styled.div`\n  height: 250px;\n  width: auto;\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Img = styled.img`\n  height: 250px;\n  width: auto;\n  max-width: 100%;\n  margin: 0px auto;\n`;\n\nconst CommentLabel = styled(Label)`\n  border-top: 2px solid black;\n  padding-top: 5px;\n  margin-top: 15px;\n  font-weight: 700;\n`;\n\nconst SInputTextArea = styled(Input.TextArea)`\n  font-size: ${(props: ISProps) => props.theme.searchFontSize};\n  resize: none;\n`;\n\ninterface IFiles {\n  url: string;\n}\n\ninterface IUser {\n  username: string;\n}\n\nexport interface IComment {\n  text: string;\n  user: IUser;\n}\n\ninterface IProps {\n  title?: string;\n  location?: string;\n  desc?: string;\n  category?: string;\n  createdAt?: string | null;\n  updatadAt?: string | null;\n  user?: IUser;\n  files?: (IFiles | null)[] | null;\n  comments?: (IComment | null)[] | null;\n}\n\nconst PostCard: React.FC<IProps> = ({\n  title,\n  user,\n  location,\n  desc,\n  category,\n  createdAt,\n  updatadAt,\n  files,\n  comments\n}) => {\n  const [rentModalBool, setRentModalBool] = useState<boolean>(false);\n\n  const timestamp = new Date(\n    Date.parse(updatadAt ? updatadAt : createdAt!)\n  ).toString();\n\n  const { postId } = useParams();\n\n  const [form] = Form.useForm();\n\n  const categoryChanger = (cate: string) => {\n    switch (cate) {\n      case \"DIGITAL\":\n        return \"디지털/가전\";\n      case \"FASHION\":\n        return \"패션\";\n      case \"SPORTS\":\n        return \"스포츠/레저\";\n      case \"CHILD\":\n        return \"유아동\";\n      case \"HOUSEHOLD\":\n        return \"생활용품\";\n      default:\n        return \"기타\";\n    }\n  };\n\n  const [rentMutation, { loading }] = useMutation<ReqRent, ReqRentVariables>(\n    RENT,\n    {\n      onCompleted: data => {\n        const {\n          ReqRent: { ok, error }\n        } = data;\n        if (ok) {\n          form.resetFields();\n          notification.success({ message: \"대여 신청이 완료되었습니다.\" });\n          setRentModalBool(false);\n        } else {\n          notification.error({ message: error });\n          setRentModalBool(false);\n        }\n      }\n    }\n  );\n\n  const { data: { auth: { isLoggedIn = false } = {} } = {} } = useQuery(\n    IS_LOGGED_IN\n  );\n\n  const onRent = () => {\n    if (!isLoggedIn) {\n      notification.error({\n        message: \"로그인 해주세요\",\n        description: \"대여 신청을 위해선는 로그인이 필요합니다.\"\n      });\n      return;\n    }\n    return setRentModalBool(true);\n  };\n\n  const modalHandleOk = async () => {\n    const message = form.getFieldValue(\"message\");\n    await rentMutation({\n      variables: {\n        postId: postId!,\n        message\n      }\n    });\n  };\n\n  const modalHandleCancel = () => {\n    form.resetFields();\n    setRentModalBool(false);\n  };\n\n  return (\n    <Container>\n      <Header>\n        <Title>{title}</Title>\n        <RentBtn type=\"primary\" onClick={onRent}>\n          대여 신청\n        </RentBtn>\n      </Header>\n      <SCarousel>\n        {files &&\n          files.map((file, idx) => (\n            <ImgWrapper key={idx}>\n              <Img src={file?.url} alt=\"상품 사진\" />\n            </ImgWrapper>\n          ))}\n      </SCarousel>\n      <SDescriptions bordered column={1}>\n        <Descriptions.Item label={<Label>{\"작성자\"}</Label>}>\n          <Text>{user!.username}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={<Label>{\"지역\"}</Label>}>\n          <Text>{location}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={<Label>{\"카테고리\"}</Label>}>\n          <Text>{categoryChanger(category!)}</Text>\n        </Descriptions.Item>\n        <SDescriptionsItem label={<Label>{\"설명\"}</Label>}>\n          <Desc>{desc}</Desc>\n        </SDescriptionsItem>\n        <Descriptions.Item label={<Label>{\"작성일\"}</Label>}>\n          <Text>{timestamp}</Text>\n        </Descriptions.Item>\n      </SDescriptions>\n      <CommentLabel>댓글</CommentLabel>\n      <Comments comments={comments} />\n      <Modal\n        title=\"대여 신청\"\n        visible={rentModalBool}\n        onOk={modalHandleOk}\n        onCancel={modalHandleCancel}\n        okType=\"default\"\n        okText={loading ? <Spin /> : \"신청\"}\n        cancelText=\"취소\"\n      >\n        <Form name=\"messageForm\" form={form}>\n          <Form.Item\n            name=\"message\"\n            rules={[{ required: true, message: \"메시지를 작성해 주세요\" }]}\n          >\n            <SInputTextArea placeholder=\"1월 1일부터 2일간 대여 , 연락처 : XXX-XXXX-XXXX \" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default PostCard;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport styled from \"styled-components\";\n\nimport { POST_DETAIL } from \"./PostDetail.queries\";\nimport {\n  PostDetailVariables,\n  PostDetail as PostDetailData\n} from \"../../types/api\";\nimport PostCard from \"../../Components/PostCard\";\nimport { TTheme } from \"../../styles/theme\";\nimport { Spin } from \"antd\";\n\ninterface ISProps {\n  theme: TTheme;\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: ${(props: ISProps) => props.theme.basicMarginTop};\n`;\n\nconst PostDetail: React.FC = () => {\n  const { postId } = useParams();\n  const { data, loading } = useQuery<PostDetailData, PostDetailVariables>(\n    POST_DETAIL,\n    {\n      variables: { postId: postId! }\n    }\n  );\n  return (\n    <Container>\n      {!loading && data && data.PostDetail ? (\n        <PostCard {...data.PostDetail.post} />\n      ) : (\n        <Spin size=\"large\" />\n      )}\n    </Container>\n  );\n};\n\nexport default PostDetail;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useParams } from \"react-router-dom\";\n\nimport MiniPostList from \"../../Components/MiniPostList/MiniPostList\";\n\nconst Container = styled.div`\n  margin-top: 10px;\n  width: 80vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Category: React.FC = () => {\n  const { categoryName } = useParams();\n  return (\n    <Container>\n      <MiniPostList category={categoryName?.toUpperCase()} />\n    </Container>\n  );\n};\n\nexport default Category;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Button, List, notification, Spin } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nimport { GetMe_GetMe_user_posts } from \"../types/api\";\nimport { ISProps } from \"../types/custom\";\n\ninterface ISPropsE extends ISProps {\n  status?: string;\n}\n\nconst Item = styled(List.Item)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.5);\n`;\n\nconst Header = styled(Link)`\n  flex: 9;\n  overflow: hidden;\n`;\n\nconst Main = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  min-width: 50px;\n`;\n\nconst StatusText = styled.div`\n  color: ${(props: ISPropsE) => {\n    return props.status && props.status !== \"대여 가능\"\n      ? props.theme.pinkColor\n      : props.theme.blueColor;\n  }};\n  text-align: center;\n`;\n\nconst StatusBtn = styled(Button)`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.2);\n  height: auto;\n  margin: 5px 0px 0px 5px;\n  border-radius: 10px;\n  padding: 5px;\n`;\n\nconst Message = styled.p`\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.5);\n`;\n\nconst Wrapper = styled.div`\n  align-self: flex-end;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst ModalBtnWrapper = styled(Wrapper)`\n  flex-direction: row;\n  margin-top: 5px;\n  justify-content: flex-end;\n`;\n\ninterface IListItem {\n  post: GetMe_GetMe_user_posts;\n  mutationFunc: (rentId: string, status: string) => void;\n  loading: boolean;\n}\n\nconst ListViewItem: React.FC<IListItem> = ({ post, mutationFunc, loading }) => {\n  const [modalBool, setModalBool] = useState<boolean>(false);\n\n  const statusTransformer = (status: string) => {\n    // 상품 상태값을 한글로 변경\n    switch (status) {\n      case \"REQUEST\":\n        return \"대여 요청\";\n      case \"RENT\":\n        return \"대여중\";\n      default:\n        return \"대여 가능\";\n    }\n  };\n\n  const [status, setStatus] = useState<string>(\n    statusTransformer(\n      post.rents && post.rents.length !== 0 ? post!.rents![0]!.status : \"\"\n    )\n  );\n\n  const showModal = () => {\n    setModalBool(true);\n  };\n\n  const handleOk = (rentId: string, status: string) => async () => {\n    try {\n      await mutationFunc(rentId, status);\n      notification.success({ message: \"대여 상품의 상태가 변경 되었습니다.\" });\n      if (status === \"RENT\") {\n        setStatus(\"대여중\");\n      } else {\n        setStatus(\"대여 가능\");\n      }\n    } catch (error) {\n      notification.error({ message: error });\n    }\n    setModalBool(false);\n  };\n\n  const handleCancel = () => {\n    setModalBool(false);\n  };\n\n  return (\n    <Item>\n      <Header to={`/post/${post.id}`}>{post.title}</Header>\n      <Main>\n        <StatusText status={status}>\n          {post.rents && post.rents.length !== 0 ? status : \"대여 가능\"}\n        </StatusText>\n        {post.rents && post.rents.length !== 0 && status !== \"대여 가능\" && (\n          <StatusBtn type=\"ghost\" onClick={showModal}>\n            대여 정보 보기\n          </StatusBtn>\n        )}\n      </Main>\n      <Modal\n        title=\"신청된 대여\"\n        visible={modalBool}\n        footer={false}\n        onCancel={handleCancel}\n      >\n        <Message>{post?.rents![0]?.message}</Message>\n        <ModalBtnWrapper>\n          {!loading ? (\n            <>\n              <StatusBtn\n                onClick={handleOk(\n                  post.rents && post.rents.length !== 0\n                    ? post!.rents![0]!.id\n                    : \"\",\n                  \"RENT\"\n                )}\n              >\n                요청 수락\n              </StatusBtn>\n              <StatusBtn\n                onClick={handleOk(\n                  post.rents && post.rents.length !== 0\n                    ? post!.rents![0]!.id\n                    : \"\",\n                  \"DONE\"\n                )}\n              >\n                대여 종료\n              </StatusBtn>\n            </>\n          ) : (\n            <Spin />\n          )}\n        </ModalBtnWrapper>\n      </Modal>\n    </Item>\n  );\n};\n\nexport default ListViewItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  GetMe_GetMe_user_posts,\n  RentStatusUpdate,\n  RentStatusUpdateVariables\n} from \"../types/api\";\nimport { List } from \"antd\";\nimport { ISProps } from \"../types/custom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { RENT_STAUTS } from \"../shared.queries\";\nimport ListViewItem from \"./ListViewItem\";\n\nconst Container = styled.div`\n  width: ${(props: ISProps) => props.theme.basciWidth};\n`;\n\ninterface IProps {\n  posts?: GetMe_GetMe_user_posts[] | null;\n}\n\nconst PostListView: React.FC<IProps> = ({ posts }) => {\n  const [statusMutation, { loading }] = useMutation<\n    RentStatusUpdate,\n    RentStatusUpdateVariables\n  >(RENT_STAUTS);\n\n  const mutationFunc = (rentId: string, status: string) => {\n    return statusMutation({\n      variables: {\n        rentId,\n        status\n      }\n    });\n  };\n\n  return (\n    <Container>\n      <List\n        size=\"default\"\n        bordered\n        dataSource={posts!}\n        renderItem={(item, index) => (\n          <ListViewItem\n            key={index}\n            post={item}\n            mutationFunc={mutationFunc}\n            loading={loading}\n          />\n        )}\n      />\n    </Container>\n  );\n};\n\nexport default PostListView;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { ISProps } from \"../types/custom\";\nimport { GetMe, GetMe_GetMe_user_posts } from \"../types/api\";\nimport PostListView from \"./PostListView\";\nimport { Spin } from \"antd\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  margin-top: 10px;\n`;\n\nconst Header = styled.header`\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  align-self: flex-start;\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2.5);\n  font-weight: 900;\n  padding-bottom: 10px;\n  border-bottom: calc(${(props: ISProps) => props.theme.searchFontSize} / 7)\n    solid black;\n  margin-bottom: 10px;\n`;\n\ninterface IProps {\n  data?: GetMe;\n  loading: boolean;\n}\n\nconst MyShop: React.FC<IProps> = ({ data, loading }) => {\n  const [username, setUsername] = useState<string | undefined>(\"\");\n  const [posts, setPosts] = useState<\n    GetMe_GetMe_user_posts[] | null | undefined\n  >([]);\n\n  useEffect(() => {\n    // data fecth 완료 후 username 과 posts 할당\n    if (data?.GetMe) {\n      const username = data?.GetMe?.user?.username;\n      const posts = data?.GetMe?.user?.posts;\n      setUsername(username);\n      setPosts(posts);\n    }\n  }, [loading]);\n  return (\n    <Container>\n      <Header>{username}님의 상품</Header>\n      {!loading ? <PostListView posts={posts} /> : <Spin size=\"large\" />}\n    </Container>\n  );\n};\n\nexport default MyShop;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MyShop from \"../../Components/MyShop\";\nimport { GET_ME } from \"../../shared.queries\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GetMe } from \"../../types/api\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst MyLog: React.FC = () => {\n  const { data, loading } = useQuery<GetMe>(GET_ME, {\n    fetchPolicy: \"network-only\"\n  });\n\n  return (\n    <Container>\n      <MyShop data={data} loading={loading} />\n    </Container>\n  );\n};\n\nexport default MyLog;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { ISProps } from \"../../types/custom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GetMyRents } from \"../../types/api\";\nimport { GET_MY_RENTS } from \"../../shared.queries\";\nimport { Spin, List } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  margin-top: 10px;\n`;\n\nconst Header = styled.header`\n  width: ${(props: ISProps) => props.theme.basciWidth};\n  align-self: flex-start;\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 2.5);\n  font-weight: 900;\n  padding-bottom: 10px;\n  border-bottom: calc(${(props: ISProps) => props.theme.searchFontSize} / 7)\n    solid black;\n  margin-bottom: 10px;\n`;\n\nconst Main = styled.main`\n  width: ${(props: ISProps) => props.theme.basciWidth};\n`;\n\nconst Rent = styled(List.Item)`\n  display: flex;\n  flex-direction: row;\n  font-size: calc(${(props: ISProps) => props.theme.searchFontSize} * 1.5);\n  padding: 5px;\n  justify-content: space-between;\n`;\n\nconst RentTitle = styled(Link)`\n  overflow: hidden;\n  flex: 5;\n  padding-left: 5px;\n`;\n\nconst RentStatus = styled.div`\n  flex: 1;\n  text-align: center;\n  color: ${(props: ISProps) => props.theme.blueColor};\n`;\n\nconst MyLog: React.FC = () => {\n  const { data, loading } = useQuery<GetMyRents>(GET_MY_RENTS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n\n  const statusTransformer = (status: string) => {\n    // 상품 상태값을 한글로 변경\n    switch (status) {\n      case \"REQUEST\":\n        return \"대여 요청 상태\";\n      case \"RENT\":\n        return \"대여중 상태\";\n    }\n  };\n\n  return (\n    <Container>\n      <Header>나의 내역</Header>\n      <Main>\n        <List\n          size=\"default\"\n          bordered\n          dataSource={data?.GetMe?.user?.rents!}\n          loading={loading}\n          renderItem={item => (\n            <Rent>\n              <RentTitle to={`/post/${item.post.id}`}>\n                {item.post.title}\n              </RentTitle>\n              <RentStatus>{statusTransformer(item.status)}</RentStatus>\n            </Rent>\n          )}\n        />\n      </Main>\n    </Container>\n  );\n};\n\nexport default MyLog;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\n\nimport routes from \"../../Routes/routes\";\nimport Home from \"../../Routes/Home/Home\";\nimport Header from \"../Header\";\nimport styled from \"styled-components\";\nimport Search from \"../../Routes/Search/Search\";\nimport UploadPost from \"../../Routes/Upload/Upload\";\nimport PostDetail from \"../../Routes/PostDetail/PostDetail\";\nimport Category from \"../../Routes/Category/Category\";\nimport UserShop from \"../../Routes/UserShop/UserShop\";\nimport MyLog from \"../../Routes/MyLog/MyLog\";\n\nconst Main = styled.main`\n  position: relative;\n  margin-top: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  min-height: calc(100%-100px);\n`;\n\nconst AppPresenter: React.FC = () => {\n  return (\n    <Router>\n      <Header />\n      <Main>\n        <Switch>\n          <Route path={routes.HOME} exact={true} component={Home} />\n          <Route path={routes.SEARCH} exact={true} component={Search} />\n          <Route path={routes.UPLOAD} exact={true} component={UploadPost} />\n          <Route path={routes.POST} component={PostDetail} />\n          <Route path={routes.CATEGORY} component={Category} />\n          <Route path={routes.MYSHOP} component={UserShop} />\n          <Route path={routes.MYLOG} component={MyLog} />\n          <Redirect from={\"*\"} to={routes.HOME} />\n        </Switch>\n      </Main>\n    </Router>\n  );\n};\n\nexport default AppPresenter;\n","// as const\n//  - 타입을 확정해 버린다.\nconst theme = {\n  pinkColor: \"#E48282\",\n  doorColor: \"#564646\",\n  blueColor: \"#3897f0\",\n  bgColor: \"#EAEDED\",\n  searchFontSize: \"1vw\",\n  iconSize: \"3vw\",\n  borderRadius: \"10px\",\n  basicMarginTop: \"2vw\",\n  basciWidth: \"80vw\",\n  minWidth: \"500px\"\n} as const;\n\nexport type TTheme = typeof theme;\n\nexport default theme;\n","import AppContainer from \"./AppContainer\";\nexport default AppContainer;\n","import React from \"react\";\nimport AppPresenter from \"./AppPresenter\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"../../styles/theme\";\n\nconst AppContainer = () => {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <AppPresenter />\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default AppContainer;\n","// 얍의 상태를 체크한다 (로그인 여부를 확인)\n\nexport const defaults = {\n  // local state의 값 설정\n  //# window.localStorage\n  // : https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage\n  auth: {\n    __typename: \"Auth\",\n    isLoggedIn: Boolean(localStorage.getItem(\"token\"))\n  }\n};\n\nexport const resolvers = {\n  // 밑의 Mutation은 local state를 변경하는 역할\n  // # cache\n  //   - https://www.apollographql.com/docs/link/links/state/#updating-the-cache\n  //   - To update and read from the cache, you access it via the context,\n  //     which is the third argument passed to your resolver function.\n  Mutation: {\n    logUserIn: (_, { token }, { cache: appCache }) => {\n      localStorage.setItem(\"token\", token);\n      appCache.writeData({\n        data: {\n          auth: {\n            __typename: \"Auth\",\n            isLoggedIn: true\n          }\n        }\n      });\n      return null;\n    },\n    logUserOut: (_, __, { cache: appCache }) => {\n      localStorage.removeItem(\"token\");\n      appCache.writeData({\n        data: {\n          auth: {\n            __typename: \"Auth\",\n            isLoggedIn: false\n          }\n        }\n      });\n      return null;\n    }\n  }\n};\n","import ApolloClient from \"apollo-boost\";\nimport { defaults, resolvers } from \"./LocalState\";\n\nexport default new ApolloClient({\n  // ApolloClinet 환경설정 옵션\n  // https://www.apollographql.com/docs/react/get-started/#configuration-options\n\n  // uri: \"http://localhost:4000/graphql\",\n  uri:\n    \"http://ec2-3-34-52-55.ap-northeast-2.compute.amazonaws.com:4000/graphql\",\n\n  // #clientState\n  // - https://www.apollographql.com/docs/link/links/state/#with-apollo-boost\n  clientState: {\n    defaults,\n    resolvers\n  },\n\n  // 인증 방법\n  // - https://www.apollographql.com/docs/react/networking/authentication/\n  // - reqquest = 매 요청마다.\n  request: operation => {\n    //다음 과정은 매 요청마다 confirmSecret을 통해 얻은 token을 header에 넣어주는 역할을 한다.\n    const token = localStorage.getItem(\"token\");\n    operation.setContext({\n      // #setContext\n      // -https://www.apollographql.com/docs/link/overview/#gatsby-focus-wrapper\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    });\n  }\n});\n","import React, { createContext, useReducer, useContext, Dispatch } from \"react\";\n\ninterface IContext {\n  dispatch: Dispatch<IAction> | undefined;\n  state: any;\n}\n\nconst MainContext = createContext<IContext>({ dispatch: undefined, state: \"\" });\n\ninterface IPayLoad {\n  [key: string]: any;\n}\n\ninterface IAction {\n  type: \"GET_ME_REFETCH\";\n  payload: IPayLoad;\n}\n\n//actions\nexport const GET_ME_REFETCH = \"GET_ME_REFETCH\";\n\nfunction reducer(state: IAction, action: IAction): any {\n  switch (action.type) {\n    case GET_ME_REFETCH:\n      return {\n        ...state,\n        getMeRefetch: action.payload\n      };\n    default:\n      return { ...state };\n  }\n}\n\nconst MainProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useReducer(reducer, \"\");\n\n  return (\n    <MainContext.Provider value={{ dispatch, state }}>\n      {children}\n    </MainContext.Provider>\n  );\n};\n\nexport const useDispatch = () => {\n  const { dispatch } = useContext(MainContext);\n  if (!dispatch) throw new Error(\"dispatch  없음\");\n  return dispatch;\n};\n\nexport const useReducerState = () => {\n  const { state } = useContext(MainContext);\n  return state;\n};\n\nexport default MainProvider;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n  ${reset}\n  * {\n\t  box-sizing: border-box;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: \"#EAEDED\";\n    height: 650px;\n  }\n\n  a {\n\t  color: inherit;\n\t  text-decoration: none;\n  }\n  input,\n  button{\n\t  &:focus,\n\t  &:active{outline:none}\n  }\n  h1,h2,h3,h4,h5,h6{\n      font-family:'Maven Pro', sans-serif;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from \"./Apollo/apollo\";\nimport \"antd/dist/antd.css\";\nimport MainProvider from \"./Components/MainContext\";\nimport GrobalStyles from \"./styles/globalStyles\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <GrobalStyles />\n    <MainProvider>\n      <App />\n    </MainProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}